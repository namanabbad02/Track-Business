// src/utils/ReportExport.js

import * as XLSX from 'xlsx';

import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import autoTable from "jspdf-autotable";

import { robotoRegular } from "../font/robotoFont"
export const exportToPDF = async (reportData, month) => {
    const pdf = new jsPDF("p", "mm", "a4");

    // Add font
    pdf.addFileToVFS("Roboto-Regular.ttf", robotoRegular);
    pdf.addFont("Roboto-Regular.ttf", "Roboto", "normal");
    pdf.setFont("Roboto");

    // Header Section
    pdf.setFontSize(16);
    pdf.setTextColor("#000000");
    pdf.text("Cotton Cargo Pvt. Ltd", 105, 10, { align: "center" }); // Company name
    pdf.setFontSize(14);
    pdf.setTextColor("#2E86C1");
    pdf.text("Monthly Business Report", 105, 18, { align: "center" }); // Report title
    pdf.setFontSize(12);
    pdf.setTextColor("#000000");
    pdf.text(`For the month of ${formatMonth(month)}`, 105, 25, { align: "center" }); // Month
    // pdf.setFontSize(10);
    // pdf.text("Generated by: Track Business", 105, 30, { align: "center" }); // Application name

    let yOffset = 40;

    // Summary Section
    pdf.setFillColor(230, 230, 230);
    pdf.rect(10, yOffset, 190, 8, "F");
    pdf.setFontSize(14);
    pdf.text("Summary", 15, yOffset + 6);
    yOffset += 15;

    const totalExpenses = [reportData.Hamali, reportData.ShopExpenses, reportData.Cartage, reportData.OtherExpenses]
        .map(expense => parseFloat(expense) || 0)
        .reduce((acc, curr) => acc + curr, 0);

    // Two-column layout for summary
    pdf.setFontSize(10);
    pdf.text(`Total Purchases: ${formatCurrency(reportData.PurchasesTotalAmount)}`, 15, yOffset);
    pdf.text(`Total Sales: ${formatCurrency(reportData.SalesTotalAmount)}`, 105, yOffset);
    yOffset += 6;
    pdf.text(`Gross Profit/Loss: ${formatCurrency((reportData.SalesTotalAmount - reportData.PurchasesTotalAmount).toFixed(2))}`, 15, yOffset);
    pdf.text(`Net Profit/Loss: ${formatCurrency((reportData.SalesTotalAmount - reportData.PurchasesTotalAmount - totalExpenses).toFixed(2))}`, 105, yOffset);
    yOffset += 10;

    // Expense Breakdown Section
    pdf.setFillColor(230, 230, 230);
    pdf.rect(10, yOffset, 190, 8, "F");
    pdf.setFontSize(14);
    pdf.text("Expense Breakdown", 15, yOffset + 6);
    yOffset += 15;

    autoTable(pdf, {
        startY: yOffset,
        head: [["Expense Type", "Amount (INR)"]],
        body: [
            ["Hamali", formatCurrency(reportData.Hamali || 0)],
            ["Shop Expenses", formatCurrency(reportData.ShopExpenses || 0)],
            ["Cartage", formatCurrency(reportData.Cartage || 0)],
            ["Other Expenses", formatCurrency(reportData.OtherExpenses || 0)],
        ],
        theme: "striped",
        styles: { font: "Roboto" },
    });

    yOffset = pdf.lastAutoTable.finalY + 10;

    // GST Analysis Section
    pdf.setFillColor(230, 230, 230);
    pdf.rect(10, yOffset, 190, 8, "F");
    pdf.setFontSize(14);
    pdf.text("GST Analysis", 15, yOffset + 6);
    yOffset += 15;

    autoTable(pdf, {
        startY: yOffset,
        head: [["GST Type", "Amount (INR)"]],
        body: [
            ["GST Collected", formatCurrency(reportData.TotalGSTCollected || 0)],
            ["GST Paid", formatCurrency(reportData.TotalGSTPaid || 0)],
            ["Net GST", formatCurrency((reportData.TotalGSTCollected - reportData.TotalGSTPaid).toFixed(2))],
        ],
        theme: "striped",
        styles: { font: "Roboto" },
    });

    yOffset = pdf.lastAutoTable.finalY + 10;

    
    // Footer Section
    pdf.setDrawColor(200, 200, 200);
    pdf.line(10, 285, 200, 285); // Footer line
    pdf.setFontSize(10);
    pdf.text("Computer Generated on: " + new Date().toLocaleDateString(), 10, 290); // Date
    pdf.text("No signature required.", 105, 290, { align: "center" }); // Footer note
    pdf.text("Page 1 of 1", 200, 290, { align: "right" });

    pdf.save(`${formatMonth(month)}.pdf`);
};


const formatCurrency = (value) => {
    if (value == null) return "â‚¹0.00";
    return new Intl.NumberFormat("en-IN", {
        style: "currency",
        currency: "INR",
    }).format(value);
};

const formatMonth = (monthString) => {
    const date = new Date(monthString);
    const options = { year: 'numeric', month: 'long' };
    return new Intl.DateTimeFormat('en-US', options).format(date);
};

export const exportToExcel = (reportData, month) => {
    const data = [
        ['Report Summary', '', ''],
        ['Month', month],
        ['Total Purchases', reportData.PurchasesTotalAmount],
        ['Total Sales', reportData.SalesTotalAmount],
        ['Net Profit/Loss', reportData.NetProfitLoss],
        ['Total GST Collected', reportData.TotalGSTCollected],
        ['Total GST Paid', reportData.TotalGSTPaid],
        ['Total Expenses', reportData.TotalExpenses],
        ['', '', ''],
        ['Expense Breakdown', '', ''],
        ['Hamali', reportData.Hamali],
        ['Shop Expenses', reportData.ShopExpenses],
        ['Cartage', reportData.Cartage],
        ['Other Expenses', reportData.OtherExpenses]
    ];

    const ws = XLSX.utils.aoa_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Report');
    XLSX.writeFile(wb, 'monthly_report.xlsx');
};
